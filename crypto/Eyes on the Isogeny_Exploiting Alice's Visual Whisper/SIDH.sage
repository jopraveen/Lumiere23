import hashlib
from base64 import b64encode
from Crypto.Cipher import AES
from Crv_Param import *

p = 2^216*3^137 - 1
F.<i> = GF(p^2, modulus=x^2+1)
E = EllipticCurve(F, [0, 6, 0, 1, 0])

Q_A = E(Q_x0 + Q_x1*i, Q_y0 + Q_y1*i)
P_A = E(P_x0 + P_x1*i, P_y0 + P_y1*i)
Q_B = E(Q_x3 + Q_x4*i, Q_y3 + Q_y4*i)
P_B = E(P_x3 + P_x4*i, P_y3 + P_y4*i)

# Computes an l^e isogeny out of E from a set zZ of kernel generators as a composition of e l-isogenies
def Brew_Isogeny(E, zZ, l, e):
    S_tmps = zZ
    E_tmp = E
    phi = None
    for k in range(e):
        R_tmps = S_tmps
        for _ in range(e-k-1):
            R_tmps = [ l*R_tmp for R_tmp in R_tmps ]
        phi_k = E_tmp.isogeny(kernel=R_tmps)

        S_tmps = [ phi_k(S_tmp) for S_tmp in S_tmps ]
        E_tmp = phi_k.codomain()
        if phi is None:
            phi = phi_k
        else:
            phi = phi_k * phi
    return phi

k_A = randint(0, 2^216-1)
S_A = P_A + k_A*Q_A
phi_A = Brew_Isogeny(E, [S_A], 2, 216)
Alice = (phi_A.codomain().a_invariants(), phi_A(P_B).xy(), phi_A(Q_B).xy(), phi_A(P_A).xy(), phi_A(Q_A).xy())
print(f"Alice = {Alice}")

k_B = randint(0, 3^137-1) 
S_B = P_B + k_B*Q_B
phi_B = Brew_Isogeny(E, [S_B], 3, 137)
Bob = (phi_B.codomain().a_invariants(), phi_B(P_A).xy(), phi_B(Q_A).xy())
print(f"Bob = {Bob}")

(E_B, B_P_A, B_Q_A) = Bob
E_B = EllipticCurve(F, E_B)
B_P_A = E_B(B_P_A)
B_Q_A = E_B(B_Q_A)
B_S_A = B_P_A + k_A*B_Q_A
jAlice = Brew_Isogeny(E_B, [B_S_A], 2, 216).codomain().j_invariant()

(E_A, A_P_B, A_Q_B, _, _) = Alice
E_A = EllipticCurve(F, E_A)
A_P_B = E_A(A_P_B)
A_Q_B = E_A(A_Q_B)
A_S_B = A_P_B + k_B*A_Q_B
jBob = Brew_Isogeny(E_A, [A_S_B], 3, 137).codomain().j_invariant()

assert jAlice == jBob

FLAG =open("flag.txt", "rb").read().strip()
length_F = len(FLAG) // 2
m1, m2 = (FLAG[:length_F]), (FLAG[length_F:])
flag1 = m1 
assert len(flag1) == 32
flag2 = m2
assert len(flag1) == 32

sk = hashlib.sha256(str(jAlice).encode('ascii')).digest()[:16]
cipher = AES.new(sk, AES.MODE_CBC)
print(f"iv = {b64encode(cipher.iv)}")
print(f"ct1 = {b64encode(cipher.encrypt(flag1))}")
print(f"ct2 = {b64encode(cipher.encrypt(flag2))}")
